/*
 * TCSS 305 - Assignment 5: PowerPaint
 */
package gui;

//import java.awt.BorderLayout;
//import java.awt.Dimension;
//import java.awt.Toolkit;
//
//import javax.swing.JButton;
//import javax.swing.JFileChooser;
import actions.EllipseAction;
import actions.LineAction;
import actions.PencilAction;
import actions.RectangleAction;

import java.awt.BorderLayout;
import java.awt.Color;
//import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

import javax.swing.Action;
import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JColorChooser;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JSlider;
import javax.swing.JToggleButton;
import javax.swing.JToolBar;
import javax.swing.SwingConstants;

import tools.EllipseTool;
import tools.LineTool;
import tools.PencilTool;
import tools.RectangleTool;


/**
 * Displays the GUI.
 * 
 * @author Shannon Murphy
 * @version 7 February 2015
 *
 */
public class PowerPaintGUI implements PropertyChangeListener {
    
    // constants to capture screen dimensions
    /** A ToolKit. */
    private static final Toolkit KIT = Toolkit.getDefaultToolkit();
    
    /** The Dimension of the screen. */
    private static final Dimension SCREEN_SIZE = KIT.getScreenSize();
    
    /** Default for the Major tick-spacing of the JSlider. */
    private static final int DEFAULT_MAJOR_TICK = 5;
    
    // instance fields
    /** The frame for this application's GUI. */
    private final JFrame myFrame;
    
    /** The panel where drawings are made. */
    private final DrawingPanel myDrawPanel;
    
    /** MenuBar. */
    private final JMenuBar myMenuBar;
    
    /** Button group for the ToolBar buttons. */
    private final ButtonGroup myToolBarGroup;
    
    /** Button group. */
    private final ButtonGroup myToolMenuGroup;
    
//    /** A JSlider for the Thickness. */
//    private JSlider mySlider;
    
    /**
     * Constructor to initialize fields.
     */
    public PowerPaintGUI() {
        myFrame = new JFrame("TCSS 305 PowerPaint");
        myDrawPanel = new DrawingPanel();
        myMenuBar = new JMenuBar();   
        myToolBarGroup = new ButtonGroup();
        myToolMenuGroup = new ButtonGroup();
    } 
    
    /**
     * Sets up and displays the GUI for this application.
     */
    public void start() {     
        myFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);      
        setupComponents();
        myFrame.pack();
        myFrame.setVisible(true);   
        myFrame.setLocation(SCREEN_SIZE.width / 2 - myFrame.getWidth() / 2,
                            SCREEN_SIZE.height / 2 - myFrame.getHeight() / 2);
    }
    
    /**
     * Sets up the components in this frame.
     */
    private void setupComponents() {        
        myFrame.add(myDrawPanel, BorderLayout.CENTER);
        setUpMenu();
        myFrame.setJMenuBar(myMenuBar);
        myFrame.setIconImage(new ImageIcon("images//paint.png").getImage());
        
        final Action[] actions = {new PencilAction(myDrawPanel, new PencilTool()),
                                  new LineAction(myDrawPanel, new LineTool()), 
                                  new RectangleAction(myDrawPanel, new RectangleTool()),
                                  new EllipseAction(myDrawPanel, new EllipseTool())};
        myDrawPanel.addPropertyChangeListener(this);
        
        final JMenu toolMenu = new JMenu("Tools");
        toolMenu.setMnemonic(KeyEvent.VK_T);
        final JToolBar toolBar = new JToolBar();
        for (final Action current : actions) {
            toolMenu.add(createToolMenu(current));
            toolBar.add(createToolBar(current));
        }
        myMenuBar.add(toolMenu);
        createHelpMenu();
        createColorMenu();
        myFrame.add(toolBar, BorderLayout.SOUTH);
    }     
    
    /**
     * Sets up the menu bar for this frame.
     */
    private void setUpMenu() {   
        createFileMenu();
        createOptionMenu();
    } 
    
    /** Creates the file menu. */
    private void createFileMenu() {
        final JMenu fileMenu = new JMenu("File");
        fileMenu.setMnemonic(KeyEvent.VK_F);
        final JMenuItem fileUndo = new JMenuItem("Undo all changes",
                                                 KeyEvent.VK_U);
        fileUndo.setEnabled(false);
        final JMenuItem fileExit = new JMenuItem("Exit", KeyEvent.VK_X);     
        fileMenu.add(fileUndo);
        fileMenu.add(fileExit);
        myMenuBar.add(fileMenu);
    }
    
    /** Creates the option menu. */
    private void createOptionMenu() {
        final JMenu optionMenu = new JMenu("Options");
        optionMenu.setMnemonic(KeyEvent.VK_O);
        final JCheckBoxMenuItem optionGrid = new JCheckBoxMenuItem("Grid");
        optionGrid.setMnemonic(KeyEvent.VK_G);
        optionMenu.add(optionGrid);
        final JMenu optionThickness = new JMenu("Thickness");
        optionThickness.setMnemonic(KeyEvent.VK_T);
        
        final JSlider thickSlider = new JSlider(SwingConstants.HORIZONTAL, 0, 20, 1);
        thickSlider.setMajorTickSpacing(DEFAULT_MAJOR_TICK);
        thickSlider.setMinorTickSpacing(1);
        thickSlider.setPaintLabels(true);
        thickSlider.setPaintTicks(true);
        
        optionThickness.add(thickSlider);        
        optionMenu.add(optionThickness);
        myMenuBar.add(optionMenu);
    }
    
    /** Creates the tool menu.
     * @param theAction .
     * @return a jradio button.
     */
    private JRadioButtonMenuItem createToolMenu(final Action theAction) {
        final JRadioButtonMenuItem createdButton = new JRadioButtonMenuItem(theAction);
        myToolMenuGroup.add(createdButton);
        return createdButton;
    }
    
    /** Creates the help menu. */
    private void createHelpMenu() {
        final JMenu helpMenu = new JMenu("Help");
        final JMenuItem helpAbout = new JMenuItem("About...", KeyEvent.VK_A);
        helpMenu.add(helpAbout);      
        helpMenu.setMnemonic(KeyEvent.VK_H);
        myMenuBar.add(helpMenu);
    }
    
    /** Creates the color menu. */
    private void createColorMenu() {
        final JMenuItem colorMenu = new JMenuItem("Color...");
        colorMenu.setMnemonic(KeyEvent.VK_C);
        myMenuBar.add(colorMenu);
        colorMenu.addActionListener(new ColorListener());
    }
    
    /** 
     * TODO.
     * @param theAction .
     * @return button.
     */
    private JToggleButton createToolBar(final Action theAction) {
        
        final JToggleButton toggleButton = new JToggleButton(theAction);
        myToolBarGroup.add(toggleButton);
        return toggleButton;
    }
    
    @Override
    public void propertyChange(final PropertyChangeEvent theEvent) {
        if ("text".equals(theEvent.getPropertyName())) {
            if ("Line".equals(theEvent.getNewValue())) {
                myDrawPanel.setTool(new LineTool());
            } else if ("Pencil".equals(theEvent.getNewValue())) {
                myDrawPanel.setTool(new PencilTool());
            } else if ("Ellipse".equals(theEvent.getNewValue())) {
                myDrawPanel.setTool(new EllipseTool());
            } else if ("Rectangle".equals(theEvent.getNewValue())) {
                myDrawPanel.setTool(new RectangleTool());
            }
        }
    }
    
    /**
     * TODO.
     */
    public class ColorListener implements ActionListener {
        
        /** {@inheritDoc} */
        @Override
        public void actionPerformed(final ActionEvent theEvent) {
            final Color newColor = JColorChooser.showDialog(
                                                      myFrame,
                                                      "Choose Paint Color",
                                                      Color.BLACK);
            myDrawPanel.setColor(newColor);
        }
    }
}
